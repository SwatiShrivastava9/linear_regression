# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qj4QggUDM49qw83734nfX6UbrR7UHNxU
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from google.colab import files
from sklearn.model_selection import train_test_split
uploaded = files.upload()
data = pd.read_csv('student_data.csv')


# Convert 'Yes' and 'No' to binary values (1 and 0)
data['Extracurricular Activities'] = data['Extracurricular Activities'].map({'Yes': 1, 'No': 0})

# Histogram for 'hours studied'
plt.hist(data['Hours Studied'], bins=20, color='blue', alpha=0.7)
plt.xlabel('Hours Studied')
plt.ylabel('Frequency')
plt.title('Histogram of Hours Studied')
plt.show()

# Histogram for 'previous scores'
plt.hist(data['Previous Scores'], bins=20, color='green', alpha=0.7)
plt.xlabel('Previous Scores')
plt.ylabel('Frequency')
plt.title('Histogram of Previous Scores')
plt.show()

# Histogram for 'extra curricular activities'
plt.hist(data['Extracurricular Activities'], bins=20, color='orange', alpha=0.7)
plt.xlabel('Extra Curricular Activities')
plt.ylabel('Frequency')
plt.title('Histogram of Extra Curricular Activities')
plt.show()

# Histogram for 'duration of sleep'
plt.hist(data['Duration of Sleep'], bins=20, color='purple', alpha=0.7)
plt.xlabel('Duration of Sleep')
plt.ylabel('Frequency')
plt.title('Histogram of Duration of Sleep')
plt.show()

# Histogram for 'sample question papers practiced'
plt.hist(data['Sample Question Papers Practiced'], bins=20, color='red', alpha=0.7)
plt.xlabel('Sample Question Papers Practiced')
plt.ylabel('Frequency')
plt.title('Histogram of Sample Question Papers Practiced')
plt.show()

# Histogram for 'performance'
plt.hist(data['Performance'], bins=20, color='magenta', alpha=0.7)
plt.xlabel('Performance')
plt.ylabel('Frequency')
plt.title('Histogram of Performance')
plt.show()



# Assuming 'data' is your DataFrame
X = data.drop('Performance', axis=1)  # Features (all columns except 'performance')
y = data['Performance']  # Target variable

# Splitting the data into train and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Print the shape of the resulting sets to verify the split
print("X_train shape:", X_train.shape)
print("X_test shape:", X_test.shape)
print("y_train shape:", y_train.shape)
print("y_test shape:", y_test.shape)


# Convert categorical variable 'extra curricular activities' to one-hot encoding
X_encoded = pd.get_dummies(X, columns=['Extracurricular Activities'], drop_first=True)


# Add a bias term (intercept) to the features
X_train_with_bias = np.c_[np.ones(X_train.shape[0]), X_train]

# Compute the parameters using the normal equation
theta = np.linalg.inv(X_train_with_bias.T @ X_train_with_bias) @ X_train_with_bias.T @ y_train.values.reshape(-1, 1)

# Print the learned parameters
print("Learned parameters (theta):", theta)

# Process the test set similar to the training set (including one-hot encoding)
X_test_encoded = pd.get_dummies(X_test, columns=['Extracurricular Activities'], drop_first=True)
X_test_with_bias = np.c_[np.ones(X_test_encoded.shape[0]), X_test_encoded]

# Predict using the test set
y_pred = X_test_with_bias @ theta

# Ensure y_pred is a 1D array (flatten if needed)
y_pred = y_pred.flatten()

# Calculate Mean Squared Error (MSE) on the test set
mse = np.mean((y_test - y_pred)**2)
print("Mean Squared Error on test set:", mse)

# Calculate R-squared (R2) score on the test set
total_variation = np.sum((y_test - np.mean(y_test))**2)
residuals_variation = np.sum((y_test - y_pred)**2)
r2_score = 1 - (residuals_variation / total_variation)
print("R-squared (R2) Score on test set:", r2_score)